# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Comment
A Comment on an Article or Podcast Episode

    Comment(;
        type_of=nothing,
        id_code=nothing,
        created_at=nothing,
        image_url=nothing,
    )

    - type_of::String
    - id_code::String
    - created_at::ZonedDateTime
    - image_url::String : Podcast image url
"""
Base.@kwdef mutable struct Comment <: OpenAPI.APIModel
    type_of::Union{Nothing, String} = nothing
    id_code::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    image_url::Union{Nothing, String} = nothing

    function Comment(type_of, id_code, created_at, image_url, )
        OpenAPI.validate_property(Comment, Symbol("type_of"), type_of)
        OpenAPI.validate_property(Comment, Symbol("id_code"), id_code)
        OpenAPI.validate_property(Comment, Symbol("created_at"), created_at)
        OpenAPI.validate_property(Comment, Symbol("image_url"), image_url)
        return new(type_of, id_code, created_at, image_url, )
    end
end # type Comment

const _property_types_Comment = Dict{Symbol,String}(Symbol("type_of")=>"String", Symbol("id_code")=>"String", Symbol("created_at")=>"ZonedDateTime", Symbol("image_url")=>"String", )
OpenAPI.property_type(::Type{ Comment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Comment[name]))}

function check_required(o::Comment)
    true
end

function OpenAPI.validate_property(::Type{ Comment }, name::Symbol, val)
    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "Comment", :format, val, "date-time")
    end
    if name === Symbol("image_url")
        OpenAPI.validate_param(name, "Comment", :format, val, "url")
    end
end
