# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProfileImage
A profile image object

    ProfileImage(;
        type_of=nothing,
        image_of=nothing,
        profile_image=nothing,
        profile_image_90=nothing,
    )

    - type_of::String : Return profile_image
    - image_of::String : Determines the type of the profile image owner (user or organization)
    - profile_image::String : Profile image (640x640)
    - profile_image_90::String : Profile image (90x90)
"""
Base.@kwdef mutable struct ProfileImage <: OpenAPI.APIModel
    type_of::Union{Nothing, String} = nothing
    image_of::Union{Nothing, String} = nothing
    profile_image::Union{Nothing, String} = nothing
    profile_image_90::Union{Nothing, String} = nothing

    function ProfileImage(type_of, image_of, profile_image, profile_image_90, )
        OpenAPI.validate_property(ProfileImage, Symbol("type_of"), type_of)
        OpenAPI.validate_property(ProfileImage, Symbol("image_of"), image_of)
        OpenAPI.validate_property(ProfileImage, Symbol("profile_image"), profile_image)
        OpenAPI.validate_property(ProfileImage, Symbol("profile_image_90"), profile_image_90)
        return new(type_of, image_of, profile_image, profile_image_90, )
    end
end # type ProfileImage

const _property_types_ProfileImage = Dict{Symbol,String}(Symbol("type_of")=>"String", Symbol("image_of")=>"String", Symbol("profile_image")=>"String", Symbol("profile_image_90")=>"String", )
OpenAPI.property_type(::Type{ ProfileImage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProfileImage[name]))}

function check_required(o::ProfileImage)
    true
end

function OpenAPI.validate_property(::Type{ ProfileImage }, name::Symbol, val)
end
