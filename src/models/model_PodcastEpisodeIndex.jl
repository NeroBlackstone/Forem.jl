# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PodcastEpisodeIndex
Representation of a podcast episode returned in a list

    PodcastEpisodeIndex(;
        type_of=nothing,
        id=nothing,
        class_name=nothing,
        path=nothing,
        title=nothing,
        image_url=nothing,
        podcast=nothing,
    )

    - type_of::String
    - id::Int64
    - class_name::String
    - path::String
    - title::String
    - image_url::String : Podcast episode image url or podcast image url
    - podcast::SharedPodcast
"""
Base.@kwdef mutable struct PodcastEpisodeIndex <: OpenAPI.APIModel
    type_of::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    class_name::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    image_url::Union{Nothing, String} = nothing
    podcast = nothing # spec type: Union{ Nothing, SharedPodcast }

    function PodcastEpisodeIndex(type_of, id, class_name, path, title, image_url, podcast, )
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("type_of"), type_of)
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("id"), id)
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("class_name"), class_name)
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("path"), path)
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("title"), title)
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("image_url"), image_url)
        OpenAPI.validate_property(PodcastEpisodeIndex, Symbol("podcast"), podcast)
        return new(type_of, id, class_name, path, title, image_url, podcast, )
    end
end # type PodcastEpisodeIndex

const _property_types_PodcastEpisodeIndex = Dict{Symbol,String}(Symbol("type_of")=>"String", Symbol("id")=>"Int64", Symbol("class_name")=>"String", Symbol("path")=>"String", Symbol("title")=>"String", Symbol("image_url")=>"String", Symbol("podcast")=>"SharedPodcast", )
OpenAPI.property_type(::Type{ PodcastEpisodeIndex }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PodcastEpisodeIndex[name]))}

function check_required(o::PodcastEpisodeIndex)
    o.type_of === nothing && (return false)
    o.id === nothing && (return false)
    o.class_name === nothing && (return false)
    o.path === nothing && (return false)
    o.title === nothing && (return false)
    o.image_url === nothing && (return false)
    o.podcast === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PodcastEpisodeIndex }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "PodcastEpisodeIndex", :format, val, "int32")
    end
    if name === Symbol("path")
        OpenAPI.validate_param(name, "PodcastEpisodeIndex", :format, val, "path")
    end
    if name === Symbol("image_url")
        OpenAPI.validate_param(name, "PodcastEpisodeIndex", :format, val, "url")
    end
end
