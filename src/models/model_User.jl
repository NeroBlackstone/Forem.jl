# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""User
The representation of a user

    User(;
        type_of=nothing,
        id=nothing,
        username=nothing,
        name=nothing,
        summary=nothing,
        twitter_username=nothing,
        github_username=nothing,
        website_url=nothing,
        location=nothing,
        joined_at=nothing,
        profile_image=nothing,
    )

    - type_of::String
    - id::Int64
    - username::String
    - name::String
    - summary::String
    - twitter_username::String
    - github_username::String
    - website_url::String
    - location::String
    - joined_at::String
    - profile_image::String
"""
Base.@kwdef mutable struct User <: OpenAPI.APIModel
    type_of::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    username::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    summary::Union{Nothing, String} = nothing
    twitter_username::Union{Nothing, String} = nothing
    github_username::Union{Nothing, String} = nothing
    website_url::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    joined_at::Union{Nothing, String} = nothing
    profile_image::Union{Nothing, String} = nothing

    function User(type_of, id, username, name, summary, twitter_username, github_username, website_url, location, joined_at, profile_image, )
        OpenAPI.validate_property(User, Symbol("type_of"), type_of)
        OpenAPI.validate_property(User, Symbol("id"), id)
        OpenAPI.validate_property(User, Symbol("username"), username)
        OpenAPI.validate_property(User, Symbol("name"), name)
        OpenAPI.validate_property(User, Symbol("summary"), summary)
        OpenAPI.validate_property(User, Symbol("twitter_username"), twitter_username)
        OpenAPI.validate_property(User, Symbol("github_username"), github_username)
        OpenAPI.validate_property(User, Symbol("website_url"), website_url)
        OpenAPI.validate_property(User, Symbol("location"), location)
        OpenAPI.validate_property(User, Symbol("joined_at"), joined_at)
        OpenAPI.validate_property(User, Symbol("profile_image"), profile_image)
        return new(type_of, id, username, name, summary, twitter_username, github_username, website_url, location, joined_at, profile_image, )
    end
end # type User

const _property_types_User = Dict{Symbol,String}(Symbol("type_of")=>"String", Symbol("id")=>"Int64", Symbol("username")=>"String", Symbol("name")=>"String", Symbol("summary")=>"String", Symbol("twitter_username")=>"String", Symbol("github_username")=>"String", Symbol("website_url")=>"String", Symbol("location")=>"String", Symbol("joined_at")=>"String", Symbol("profile_image")=>"String", )
OpenAPI.property_type(::Type{ User }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_User[name]))}

function check_required(o::User)
    true
end

function OpenAPI.validate_property(::Type{ User }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "User", :format, val, "int64")
    end
end
