# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ArticleFlareTag
Flare tag of the article

    ArticleFlareTag(;
        name=nothing,
        bg_color_hex=nothing,
        text_color_hex=nothing,
    )

    - name::String
    - bg_color_hex::String : Background color (hexadecimal)
    - text_color_hex::String : Text color (hexadecimal)
"""
Base.@kwdef mutable struct ArticleFlareTag <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    bg_color_hex::Union{Nothing, String} = nothing
    text_color_hex::Union{Nothing, String} = nothing

    function ArticleFlareTag(name, bg_color_hex, text_color_hex, )
        OpenAPI.validate_property(ArticleFlareTag, Symbol("name"), name)
        OpenAPI.validate_property(ArticleFlareTag, Symbol("bg_color_hex"), bg_color_hex)
        OpenAPI.validate_property(ArticleFlareTag, Symbol("text_color_hex"), text_color_hex)
        return new(name, bg_color_hex, text_color_hex, )
    end
end # type ArticleFlareTag

const _property_types_ArticleFlareTag = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("bg_color_hex")=>"String", Symbol("text_color_hex")=>"String", )
OpenAPI.property_type(::Type{ ArticleFlareTag }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ArticleFlareTag[name]))}

function check_required(o::ArticleFlareTag)
    true
end

function OpenAPI.validate_property(::Type{ ArticleFlareTag }, name::Symbol, val)
end
