# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DisplayAd
A Display Ad, aka Billboard, aka Widget

    DisplayAd(;
        id=nothing,
        name=nothing,
        body_markdown=nothing,
        approved=nothing,
        published=nothing,
        organization_id=nothing,
        creator_id=nothing,
        placement_area=nothing,
        tag_list=nothing,
        article_exclude_ids=nothing,
        audience_segment_type=nothing,
        display_to="all",
        type_of="in_house",
    )

    - id::Int64 : The ID of the Display Ad
    - name::String : For internal use, helps distinguish ads from one another
    - body_markdown::String : The text (in markdown) of the ad (required)
    - approved::Bool : Ad must be both published and approved to be in rotation
    - published::Bool : Ad must be both published and approved to be in rotation
    - organization_id::Int64 : Identifies the organization to which the ad belongs
    - creator_id::Int64 : Identifies the user who created the ad.
    - placement_area::String : Identifies which area of site layout the ad can appear in
    - tag_list::String : Tags on which this ad can be displayed (blank is all/any tags)
    - article_exclude_ids::String : Articles this ad should *not* appear on (blank means no articles are disallowed, and this ad can appear next to any/all articles). Comma-separated list of integer Article IDs
    - audience_segment_type::String : Specifies an group of users to show this ad to (only works with logged-in users)
    - display_to::String : Potentially limits visitors to whom the ad is visible
    - type_of::String : Types of the billboards: in_house (created by admins), community (created by an entity, appears on entity&#39;s content), external ( created by an entity, or a non-entity, can appear everywhere) 
"""
Base.@kwdef mutable struct DisplayAd <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    body_markdown::Union{Nothing, String} = nothing
    approved::Union{Nothing, Bool} = nothing
    published::Union{Nothing, Bool} = nothing
    organization_id::Union{Nothing, Int64} = nothing
    creator_id::Union{Nothing, Int64} = nothing
    placement_area::Union{Nothing, String} = nothing
    tag_list::Union{Nothing, String} = nothing
    article_exclude_ids::Union{Nothing, String} = nothing
    audience_segment_type::Union{Nothing, String} = nothing
    display_to::Union{Nothing, String} = "all"
    type_of::Union{Nothing, String} = "in_house"

    function DisplayAd(id, name, body_markdown, approved, published, organization_id, creator_id, placement_area, tag_list, article_exclude_ids, audience_segment_type, display_to, type_of, )
        OpenAPI.validate_property(DisplayAd, Symbol("id"), id)
        OpenAPI.validate_property(DisplayAd, Symbol("name"), name)
        OpenAPI.validate_property(DisplayAd, Symbol("body_markdown"), body_markdown)
        OpenAPI.validate_property(DisplayAd, Symbol("approved"), approved)
        OpenAPI.validate_property(DisplayAd, Symbol("published"), published)
        OpenAPI.validate_property(DisplayAd, Symbol("organization_id"), organization_id)
        OpenAPI.validate_property(DisplayAd, Symbol("creator_id"), creator_id)
        OpenAPI.validate_property(DisplayAd, Symbol("placement_area"), placement_area)
        OpenAPI.validate_property(DisplayAd, Symbol("tag_list"), tag_list)
        OpenAPI.validate_property(DisplayAd, Symbol("article_exclude_ids"), article_exclude_ids)
        OpenAPI.validate_property(DisplayAd, Symbol("audience_segment_type"), audience_segment_type)
        OpenAPI.validate_property(DisplayAd, Symbol("display_to"), display_to)
        OpenAPI.validate_property(DisplayAd, Symbol("type_of"), type_of)
        return new(id, name, body_markdown, approved, published, organization_id, creator_id, placement_area, tag_list, article_exclude_ids, audience_segment_type, display_to, type_of, )
    end
end # type DisplayAd

const _property_types_DisplayAd = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("body_markdown")=>"String", Symbol("approved")=>"Bool", Symbol("published")=>"Bool", Symbol("organization_id")=>"Int64", Symbol("creator_id")=>"Int64", Symbol("placement_area")=>"String", Symbol("tag_list")=>"String", Symbol("article_exclude_ids")=>"String", Symbol("audience_segment_type")=>"String", Symbol("display_to")=>"String", Symbol("type_of")=>"String", )
OpenAPI.property_type(::Type{ DisplayAd }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DisplayAd[name]))}

function check_required(o::DisplayAd)
    o.name === nothing && (return false)
    o.body_markdown === nothing && (return false)
    o.placement_area === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DisplayAd }, name::Symbol, val)
    if name === Symbol("placement_area")
        OpenAPI.validate_param(name, "DisplayAd", :enum, val, ["sidebar_left", "sidebar_left_2", "sidebar_right", "feed_first", "feed_second", "feed_third", "post_sidebar", "post_comments"])
    end
    if name === Symbol("audience_segment_type")
        OpenAPI.validate_param(name, "DisplayAd", :enum, val, ["testing", "trusted", "posted", "no_posts_yet", "dark_theme", "light_theme", "no_experience", "experience1", "experience2", "experience3", "experience4", "experience5"])
    end
    if name === Symbol("display_to")
        OpenAPI.validate_param(name, "DisplayAd", :enum, val, ["all", "logged_in", "logged_out"])
    end
    if name === Symbol("type_of")
        OpenAPI.validate_param(name, "DisplayAd", :enum, val, ["in_house", "community", "external"])
    end
end
