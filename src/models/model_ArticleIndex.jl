# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ArticleIndex
Representation of an article or post returned in a list

    ArticleIndex(;
        type_of=nothing,
        id=nothing,
        title=nothing,
        description=nothing,
        cover_image=nothing,
        readable_publish_date=nothing,
        social_image=nothing,
        tag_list=nothing,
        tags=nothing,
        slug=nothing,
        path=nothing,
        url=nothing,
        canonical_url=nothing,
        positive_reactions_count=nothing,
        public_reactions_count=nothing,
        created_at=nothing,
        edited_at=nothing,
        crossposted_at=nothing,
        published_at=nothing,
        last_comment_at=nothing,
        published_timestamp=nothing,
        reading_time_minutes=nothing,
        user=nothing,
        flare_tag=nothing,
        organization=nothing,
    )

    - type_of::String
    - id::Int64
    - title::String
    - description::String
    - cover_image::String
    - readable_publish_date::String
    - social_image::String
    - tag_list::Vector{String}
    - tags::String
    - slug::String
    - path::String
    - url::String
    - canonical_url::String
    - positive_reactions_count::Int64
    - public_reactions_count::Int64
    - created_at::ZonedDateTime
    - edited_at::ZonedDateTime
    - crossposted_at::ZonedDateTime
    - published_at::ZonedDateTime
    - last_comment_at::ZonedDateTime
    - published_timestamp::ZonedDateTime : Crossposting or published date time
    - reading_time_minutes::Int64 : Reading time, in minutes
    - user::SharedUser
    - flare_tag::ArticleFlareTag
    - organization::SharedOrganization
"""
Base.@kwdef mutable struct ArticleIndex <: OpenAPI.APIModel
    type_of::Union{Nothing, String} = nothing
    id::Union{Nothing, Int64} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    cover_image::Union{Nothing, String} = nothing
    readable_publish_date::Union{Nothing, String} = nothing
    social_image::Union{Nothing, String} = nothing
    tag_list::Union{Nothing, Vector{String}} = nothing
    tags::Union{Nothing, String} = nothing
    slug::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    canonical_url::Union{Nothing, String} = nothing
    positive_reactions_count::Union{Nothing, Int64} = nothing
    public_reactions_count::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing
    edited_at::Union{Nothing, ZonedDateTime} = nothing
    crossposted_at::Union{Nothing, ZonedDateTime} = nothing
    published_at::Union{Nothing, ZonedDateTime} = nothing
    last_comment_at::Union{Nothing, ZonedDateTime} = nothing
    published_timestamp::Union{Nothing, ZonedDateTime} = nothing
    reading_time_minutes::Union{Nothing, Int64} = nothing
    user = nothing # spec type: Union{ Nothing, SharedUser }
    flare_tag = nothing # spec type: Union{ Nothing, ArticleFlareTag }
    organization = nothing # spec type: Union{ Nothing, SharedOrganization }

    function ArticleIndex(type_of, id, title, description, cover_image, readable_publish_date, social_image, tag_list, tags, slug, path, url, canonical_url, positive_reactions_count, public_reactions_count, created_at, edited_at, crossposted_at, published_at, last_comment_at, published_timestamp, reading_time_minutes, user, flare_tag, organization, )
        OpenAPI.validate_property(ArticleIndex, Symbol("type_of"), type_of)
        OpenAPI.validate_property(ArticleIndex, Symbol("id"), id)
        OpenAPI.validate_property(ArticleIndex, Symbol("title"), title)
        OpenAPI.validate_property(ArticleIndex, Symbol("description"), description)
        OpenAPI.validate_property(ArticleIndex, Symbol("cover_image"), cover_image)
        OpenAPI.validate_property(ArticleIndex, Symbol("readable_publish_date"), readable_publish_date)
        OpenAPI.validate_property(ArticleIndex, Symbol("social_image"), social_image)
        OpenAPI.validate_property(ArticleIndex, Symbol("tag_list"), tag_list)
        OpenAPI.validate_property(ArticleIndex, Symbol("tags"), tags)
        OpenAPI.validate_property(ArticleIndex, Symbol("slug"), slug)
        OpenAPI.validate_property(ArticleIndex, Symbol("path"), path)
        OpenAPI.validate_property(ArticleIndex, Symbol("url"), url)
        OpenAPI.validate_property(ArticleIndex, Symbol("canonical_url"), canonical_url)
        OpenAPI.validate_property(ArticleIndex, Symbol("positive_reactions_count"), positive_reactions_count)
        OpenAPI.validate_property(ArticleIndex, Symbol("public_reactions_count"), public_reactions_count)
        OpenAPI.validate_property(ArticleIndex, Symbol("created_at"), created_at)
        OpenAPI.validate_property(ArticleIndex, Symbol("edited_at"), edited_at)
        OpenAPI.validate_property(ArticleIndex, Symbol("crossposted_at"), crossposted_at)
        OpenAPI.validate_property(ArticleIndex, Symbol("published_at"), published_at)
        OpenAPI.validate_property(ArticleIndex, Symbol("last_comment_at"), last_comment_at)
        OpenAPI.validate_property(ArticleIndex, Symbol("published_timestamp"), published_timestamp)
        OpenAPI.validate_property(ArticleIndex, Symbol("reading_time_minutes"), reading_time_minutes)
        OpenAPI.validate_property(ArticleIndex, Symbol("user"), user)
        OpenAPI.validate_property(ArticleIndex, Symbol("flare_tag"), flare_tag)
        OpenAPI.validate_property(ArticleIndex, Symbol("organization"), organization)
        return new(type_of, id, title, description, cover_image, readable_publish_date, social_image, tag_list, tags, slug, path, url, canonical_url, positive_reactions_count, public_reactions_count, created_at, edited_at, crossposted_at, published_at, last_comment_at, published_timestamp, reading_time_minutes, user, flare_tag, organization, )
    end
end # type ArticleIndex

const _property_types_ArticleIndex = Dict{Symbol,String}(Symbol("type_of")=>"String", Symbol("id")=>"Int64", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("cover_image")=>"String", Symbol("readable_publish_date")=>"String", Symbol("social_image")=>"String", Symbol("tag_list")=>"Vector{String}", Symbol("tags")=>"String", Symbol("slug")=>"String", Symbol("path")=>"String", Symbol("url")=>"String", Symbol("canonical_url")=>"String", Symbol("positive_reactions_count")=>"Int64", Symbol("public_reactions_count")=>"Int64", Symbol("created_at")=>"ZonedDateTime", Symbol("edited_at")=>"ZonedDateTime", Symbol("crossposted_at")=>"ZonedDateTime", Symbol("published_at")=>"ZonedDateTime", Symbol("last_comment_at")=>"ZonedDateTime", Symbol("published_timestamp")=>"ZonedDateTime", Symbol("reading_time_minutes")=>"Int64", Symbol("user")=>"SharedUser", Symbol("flare_tag")=>"ArticleFlareTag", Symbol("organization")=>"SharedOrganization", )
OpenAPI.property_type(::Type{ ArticleIndex }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ArticleIndex[name]))}

function check_required(o::ArticleIndex)
    o.type_of === nothing && (return false)
    o.id === nothing && (return false)
    o.title === nothing && (return false)
    o.description === nothing && (return false)
    o.cover_image === nothing && (return false)
    o.readable_publish_date === nothing && (return false)
    o.social_image === nothing && (return false)
    o.tag_list === nothing && (return false)
    o.tags === nothing && (return false)
    o.slug === nothing && (return false)
    o.path === nothing && (return false)
    o.url === nothing && (return false)
    o.canonical_url === nothing && (return false)
    o.positive_reactions_count === nothing && (return false)
    o.public_reactions_count === nothing && (return false)
    o.created_at === nothing && (return false)
    o.edited_at === nothing && (return false)
    o.crossposted_at === nothing && (return false)
    o.published_at === nothing && (return false)
    o.last_comment_at === nothing && (return false)
    o.published_timestamp === nothing && (return false)
    o.reading_time_minutes === nothing && (return false)
    o.user === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ArticleIndex }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "int32")
    end
    if name === Symbol("cover_image")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "url")
    end
    if name === Symbol("social_image")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "url")
    end
    if name === Symbol("path")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "path")
    end
    if name === Symbol("url")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "url")
    end
    if name === Symbol("canonical_url")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "url")
    end
    if name === Symbol("positive_reactions_count")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "int32")
    end
    if name === Symbol("public_reactions_count")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "int32")
    end
    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "date-time")
    end
    if name === Symbol("edited_at")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "date-time")
    end
    if name === Symbol("crossposted_at")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "date-time")
    end
    if name === Symbol("published_at")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "date-time")
    end
    if name === Symbol("last_comment_at")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "date-time")
    end
    if name === Symbol("published_timestamp")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "date-time")
    end
    if name === Symbol("reading_time_minutes")
        OpenAPI.validate_param(name, "ArticleIndex", :format, val, "int32")
    end
end
