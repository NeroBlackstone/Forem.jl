# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FollowedTag
Representation of a followed tag

    FollowedTag(;
        id=nothing,
        name=nothing,
        points=nothing,
    )

    - id::Int64 : Tag id
    - name::String
    - points::Float32
"""
Base.@kwdef mutable struct FollowedTag <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    points::Union{Nothing, Float32} = nothing

    function FollowedTag(id, name, points, )
        OpenAPI.validate_property(FollowedTag, Symbol("id"), id)
        OpenAPI.validate_property(FollowedTag, Symbol("name"), name)
        OpenAPI.validate_property(FollowedTag, Symbol("points"), points)
        return new(id, name, points, )
    end
end # type FollowedTag

const _property_types_FollowedTag = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("points")=>"Float32", )
OpenAPI.property_type(::Type{ FollowedTag }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FollowedTag[name]))}

function check_required(o::FollowedTag)
    o.id === nothing && (return false)
    o.name === nothing && (return false)
    o.points === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FollowedTag }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "FollowedTag", :format, val, "int64")
    end
    if name === Symbol("points")
        OpenAPI.validate_param(name, "FollowedTag", :format, val, "float")
    end
end
