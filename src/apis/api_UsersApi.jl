# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct UsersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `UsersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ UsersApi }) = "https://dev.to/api"

const _returntypes_get_org_users_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{User},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_org_users(_api::UsersApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_org_users", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_org_users", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_org_users", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_org_users_UsersApi, "/organizations/{username}/users", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Organization's users

This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.

Params:
- username::String (required)
- page::Int64
- per_page::Int64

Return: Vector{User}, OpenAPI.Clients.ApiResponse
"""
function get_org_users(_api::UsersApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_users(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_org_users(_api::UsersApi, response_stream::Channel, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_users(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{User},
)

function _oacinternal_get_user(_api::UsersApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_UsersApi, "/users/{id}", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""A User

This endpoint allows the client to retrieve a single user, either by id or by the user's username.  For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser

Params:
- id::String (required)

Return: Vector{User}, OpenAPI.Clients.ApiResponse
"""
function get_user(_api::UsersApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user(_api::UsersApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_all_articles_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_all_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_all_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_all_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_all_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_all_articles_UsersApi, "/articles/me/all", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's all articles

This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_all_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_all_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_all_articles(_api::UsersApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_all_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_articles_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_articles_UsersApi, "/articles/me", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's articles

This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_articles(_api::UsersApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_me_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{User},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_me(_api::UsersApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_me_UsersApi, "/users/me", ["api-key", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The authenticated user

This endpoint allows the client to retrieve information about the authenticated user

Params:

Return: Vector{User}, OpenAPI.Clients.ApiResponse
"""
function get_user_me(_api::UsersApi; _mediaType=nothing)
    _ctx = _oacinternal_get_user_me(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_me(_api::UsersApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_user_me(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_published_articles_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_published_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_published_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_published_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_published_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_published_articles_UsersApi, "/articles/me/published", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's published articles

This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_published_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_published_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_published_articles(_api::UsersApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_published_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_unpublished_articles_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_unpublished_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_unpublished_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_unpublished_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_unpublished_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_unpublished_articles_UsersApi, "/articles/me/unpublished", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's unpublished articles

This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_unpublished_articles(_api::UsersApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_unpublished_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_unpublished_articles(_api::UsersApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_unpublished_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_admin_users_create_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_post_admin_users_create(_api::UsersApi; user_invite_param=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_admin_users_create_UsersApi, "/admin/users", ["api-key", ], user_invite_param)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Invite a User

This endpoint allows the client to trigger an invitation to the provided email address.          It requires a token from a user with `super_admin` privileges.

Params:
- user_invite_param::UserInviteParam

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function post_admin_users_create(_api::UsersApi; user_invite_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_admin_users_create(_api; user_invite_param=user_invite_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_admin_users_create(_api::UsersApi, response_stream::Channel; user_invite_param=nothing, _mediaType=nothing)
    _ctx = _oacinternal_post_admin_users_create(_api; user_invite_param=user_invite_param, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_suspend_user_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_suspend_user(_api::UsersApi, id::Int64; _mediaType=nothing)
    OpenAPI.validate_param("id", "suspend_user", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_suspend_user_UsersApi, "/users/{id}/suspend", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Suspend a User

This endpoint allows the client to suspend a user.  The user associated with the API key must have any 'admin' or 'moderator' role.  This specified user will be assigned the 'suspended' role. Suspending a user will stop the user from posting new posts and comments. It doesn't delete any of the user's content, just prevents them from creating new content while suspended. Users are not notified of their suspension in the UI, so if you want them to know about this, you must notify them.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function suspend_user(_api::UsersApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_suspend_user(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function suspend_user(_api::UsersApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_suspend_user(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unpublish_user_UsersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_unpublish_user(_api::UsersApi, id::Int64; _mediaType=nothing)
    OpenAPI.validate_param("id", "unpublish_user", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_unpublish_user_UsersApi, "/users/{id}/unpublish", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Unpublish a User's Articles and Comments

This endpoint allows the client to unpublish all of the articles and comments created by a user.  The user associated with the API key must have any 'admin' or 'moderator' role.  This specified user's articles and comments will be unpublished and will no longer be visible to the public. They will remain in the database and will set back to draft status on the specified user's  dashboard. Any notifications associated with the specified user's articles and comments will be deleted.  Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT status code immediately, but the articles and comments will not be unpublished until the request is completed on the server.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function unpublish_user(_api::UsersApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_unpublish_user(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unpublish_user(_api::UsersApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_unpublish_user(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_org_users
export get_user
export get_user_all_articles
export get_user_articles
export get_user_me
export get_user_published_articles
export get_user_unpublished_articles
export post_admin_users_create
export suspend_user
export unpublish_user
