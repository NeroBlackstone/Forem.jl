# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ArticlesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ArticlesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ArticlesApi }) = "https://dev.to/api"

const _returntypes_create_article_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_article(_api::ArticlesApi; article=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_article_ArticlesApi, "/articles", ["api-key", ], article)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Publish article

This endpoint allows the client to create a new article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.

Params:
- article::Article

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function create_article(_api::ArticlesApi; article=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_article(_api; article=article, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_article(_api::ArticlesApi, response_stream::Channel; article=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_article(_api; article=article, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_article_by_id_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_article_by_id(_api::ArticlesApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_article_by_id_ArticlesApi, "/articles/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Published article by id

This endpoint allows the client to retrieve a single published article given its `id`.

Params:
- id::Int64 (required)

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_article_by_id(_api::ArticlesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_article_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_article_by_id(_api::ArticlesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_article_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_article_by_path_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_article_by_path(_api::ArticlesApi, username::String, slug::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_article_by_path_ArticlesApi, "/articles/{username}/{slug}", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "slug", slug)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Published article by path

This endpoint allows the client to retrieve a single published article given its `path`.

Params:
- username::String (required)
- slug::String (required)

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_article_by_path(_api::ArticlesApi, username::String, slug::String; _mediaType=nothing)
    _ctx = _oacinternal_get_article_by_path(_api, username, slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_article_by_path(_api::ArticlesApi, response_stream::Channel, username::String, slug::String; _mediaType=nothing)
    _ctx = _oacinternal_get_article_by_path(_api, username, slug; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
)

function _oacinternal_get_articles(_api::ArticlesApi; page=nothing, per_page=nothing, tag=nothing, tags=nothing, tags_exclude=nothing, username=nothing, state=nothing, top=nothing, collection_id=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_articles", :minimum, per_page, 1, false)

    OpenAPI.validate_param("top", "get_articles", :minimum, top, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_articles_ArticlesApi, "/articles", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "tag", tag)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "tags", tags)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "tags_exclude", tags_exclude)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "state", state)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "collection_id", collection_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Published articles

This endpoint allows the client to retrieve a list of articles.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain `30` articles by default.

Params:
- page::Int64
- per_page::Int64
- tag::String
- tags::String
- tags_exclude::String
- username::String
- state::String
- top::Int64
- collection_id::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_articles(_api::ArticlesApi; page=nothing, per_page=nothing, tag=nothing, tags=nothing, tags_exclude=nothing, username=nothing, state=nothing, top=nothing, collection_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_articles(_api; page=page, per_page=per_page, tag=tag, tags=tags, tags_exclude=tags_exclude, username=username, state=state, top=top, collection_id=collection_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_articles(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, tag=nothing, tags=nothing, tags_exclude=nothing, username=nothing, state=nothing, top=nothing, collection_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_articles(_api; page=page, per_page=per_page, tag=tag, tags=tags, tags_exclude=tags_exclude, username=username, state=state, top=top, collection_id=collection_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_latest_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
)

function _oacinternal_get_latest_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_latest_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_latest_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_latest_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_latest_articles_ArticlesApi, "/articles/latest", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Published articles sorted by published date

This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain 30 articles by default.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_latest_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_latest_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_latest_articles(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_latest_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_org_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_org_articles(_api::ArticlesApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_org_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_org_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_org_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_org_articles_ArticlesApi, "/organizations/{username}/articles", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Organization's Articles

This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.

Params:
- username::String (required)
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_org_articles(_api::ArticlesApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_articles(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_org_articles(_api::ArticlesApi, response_stream::Channel, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_articles(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_all_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_all_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_all_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_all_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_all_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_all_articles_ArticlesApi, "/articles/me/all", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's all articles

This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_all_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_all_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_all_articles(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_all_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_articles_ArticlesApi, "/articles/me", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's articles

This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_articles(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_published_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_published_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_published_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_published_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_published_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_published_articles_ArticlesApi, "/articles/me/published", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's published articles

This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_published_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_published_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_published_articles(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_published_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_unpublished_articles_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_user_unpublished_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_user_unpublished_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_user_unpublished_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_user_unpublished_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_unpublished_articles_ArticlesApi, "/articles/me/unpublished", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""User's unpublished articles

This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.

Params:
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_user_unpublished_articles(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_unpublished_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_unpublished_articles(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_unpublished_articles(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unpublish_article_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_unpublish_article(_api::ArticlesApi, id::Int64; note=nothing, _mediaType=nothing)
    OpenAPI.validate_param("id", "unpublish_article", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_unpublish_article_ArticlesApi, "/articles/{id}/unpublish", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "note", note)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Unpublish an article

This endpoint allows the client to unpublish an article.  The user associated with the API key must have any 'admin' or 'moderator' role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author's posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.

Params:
- id::Int64 (required)
- note::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function unpublish_article(_api::ArticlesApi, id::Int64; note=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unpublish_article(_api, id; note=note, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unpublish_article(_api::ArticlesApi, response_stream::Channel, id::Int64; note=nothing, _mediaType=nothing)
    _ctx = _oacinternal_unpublish_article(_api, id; note=note, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_article_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_update_article(_api::ArticlesApi, id::Int64; article=nothing, _mediaType=nothing)
    OpenAPI.validate_param("id", "update_article", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_article_ArticlesApi, "/articles/{id}", ["api-key", ], article)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an article by id

This endpoint allows the client to update an existing article.  \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.

Params:
- id::Int64 (required)
- article::Article

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function update_article(_api::ArticlesApi, id::Int64; article=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_article(_api, id; article=article, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_article(_api::ArticlesApi, response_stream::Channel, id::Int64; article=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_article(_api, id; article=article, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_videos_ArticlesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{VideoArticle},
)

function _oacinternal_videos(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "videos", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "videos", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "videos", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_videos_ArticlesApi, "/videos", [])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Articles with a video

This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain 24 articles by default.

Params:
- page::Int64
- per_page::Int64

Return: Vector{VideoArticle}, OpenAPI.Clients.ApiResponse
"""
function videos(_api::ArticlesApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_videos(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function videos(_api::ArticlesApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_videos(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_article
export get_article_by_id
export get_article_by_path
export get_articles
export get_latest_articles
export get_org_articles
export get_user_all_articles
export get_user_articles
export get_user_published_articles
export get_user_unpublished_articles
export unpublish_article
export update_article
export videos
