# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CommentsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CommentsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CommentsApi }) = "https://dev.to/api"

const _returntypes_get_comment_by_id_CommentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_comment_by_id(_api::CommentsApi, id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_comment_by_id_CommentsApi, "/comments/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Comment by id

This endpoint allows the client to retrieve a comment as well as his descendants comments.    It will return the required comment (the root) with its nested descendants as a thread.    See the format specification for further details.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_comment_by_id(_api::CommentsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_comment_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_comment_by_id(_api::CommentsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_get_comment_by_id(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_comments_by_article_id_CommentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Comment},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_comments_by_article_id(_api::CommentsApi; a_id=nothing, p_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_comments_by_article_id_CommentsApi, "/comments", [])
    OpenAPI.Clients.set_param(_ctx.query, "a_id", a_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "p_id", p_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Comments

This endpoint allows the client to retrieve all comments belonging to an article or podcast episode as threaded conversations.  It will return the all top level comments with their nested comments as threads. See the format specification for further details.

Params:
- a_id::String
- p_id::String

Return: Vector{Comment}, OpenAPI.Clients.ApiResponse
"""
function get_comments_by_article_id(_api::CommentsApi; a_id=nothing, p_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_comments_by_article_id(_api; a_id=a_id, p_id=p_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_comments_by_article_id(_api::CommentsApi, response_stream::Channel; a_id=nothing, p_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_comments_by_article_id(_api; a_id=a_id, p_id=p_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_comment_by_id
export get_comments_by_article_id
