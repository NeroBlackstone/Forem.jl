# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct OrganizationsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `OrganizationsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ OrganizationsApi }) = "https://dev.to/api"

const _returntypes_get_org_articles_OrganizationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ArticleIndex},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_org_articles(_api::OrganizationsApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_org_articles", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_org_articles", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_org_articles", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_org_articles_OrganizationsApi, "/organizations/{username}/articles", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Organization's Articles

This endpoint allows the client to retrieve a list of Articles belonging to the organization  It supports pagination, each page will contain `30` users by default.

Params:
- username::String (required)
- page::Int64
- per_page::Int64

Return: Vector{ArticleIndex}, OpenAPI.Clients.ApiResponse
"""
function get_org_articles(_api::OrganizationsApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_articles(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_org_articles(_api::OrganizationsApi, response_stream::Channel, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_articles(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_org_users_OrganizationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{User},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_org_users(_api::OrganizationsApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page", "get_org_users", :minimum, page, 1, false)

    OpenAPI.validate_param("per_page", "get_org_users", :maximum, per_page, 1000, false)
    OpenAPI.validate_param("per_page", "get_org_users", :minimum, per_page, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_org_users_OrganizationsApi, "/organizations/{username}/users", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Organization's users

This endpoint allows the client to retrieve a list of users belonging to the organization  It supports pagination, each page will contain `30` users by default.

Params:
- username::String (required)
- page::Int64
- per_page::Int64

Return: Vector{User}, OpenAPI.Clients.ApiResponse
"""
function get_org_users(_api::OrganizationsApi, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_users(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_org_users(_api::OrganizationsApi, response_stream::Channel, username::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_org_users(_api, username; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_organization_OrganizationsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Organization},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_organization(_api::OrganizationsApi, username::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_organization_OrganizationsApi, "/organizations/{username}", [])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""An organization

This endpoint allows the client to retrieve a single organization by their username

Params:
- username::String (required)

Return: Vector{Organization}, OpenAPI.Clients.ApiResponse
"""
function get_organization(_api::OrganizationsApi, username::String; _mediaType=nothing)
    _ctx = _oacinternal_get_organization(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_organization(_api::OrganizationsApi, response_stream::Channel, username::String; _mediaType=nothing)
    _ctx = _oacinternal_get_organization(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_org_articles
export get_org_users
export get_organization
