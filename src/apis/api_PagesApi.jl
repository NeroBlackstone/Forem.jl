# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PagesApi }) = "https://dev.to/api"

const _returntypes_pages_get_PagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Page},
)

function _oacinternal_pages_get(_api::PagesApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_pages_get_PagesApi, "/pages", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""show details for all pages

This endpoint allows the client to retrieve details for all Page objects.

Params:

Return: Vector{Page}, OpenAPI.Clients.ApiResponse
"""
function pages_get(_api::PagesApi; _mediaType=nothing)
    _ctx = _oacinternal_pages_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pages_get(_api::PagesApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_pages_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pages_id_delete_PagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Page,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_pages_id_delete(_api::PagesApi, id::Int64; _mediaType=nothing)
    OpenAPI.validate_param("id", "pages_id_delete", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_pages_id_delete_PagesApi, "/pages/{id}", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""remove a page

This endpoint allows the client to delete a single Page object, specified by ID.

Params:
- id::Int64 (required)

Return: Page, OpenAPI.Clients.ApiResponse
"""
function pages_id_delete(_api::PagesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_pages_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pages_id_delete(_api::PagesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_pages_id_delete(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pages_id_get_PagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Page,
)

function _oacinternal_pages_id_get(_api::PagesApi, id::Int64; _mediaType=nothing)
    OpenAPI.validate_param("id", "pages_id_get", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_pages_id_get_PagesApi, "/pages/{id}", [])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""show details for a page

This endpoint allows the client to retrieve details for a single Page object, specified by ID.

Params:
- id::Int64 (required)

Return: Page, OpenAPI.Clients.ApiResponse
"""
function pages_id_get(_api::PagesApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_pages_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pages_id_get(_api::PagesApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_pages_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pages_id_put_PagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Page,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_pages_id_put(_api::PagesApi, id::Int64; page=nothing, _mediaType=nothing)
    OpenAPI.validate_param("id", "pages_id_put", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_pages_id_put_PagesApi, "/pages/{id}", ["api-key", ], page)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""update details for a page

This endpoint allows the client to retrieve details for a single Page object, specified by ID.

Params:
- id::Int64 (required)
- page::Page

Return: Page, OpenAPI.Clients.ApiResponse
"""
function pages_id_put(_api::PagesApi, id::Int64; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_pages_id_put(_api, id; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pages_id_put(_api::PagesApi, response_stream::Channel, id::Int64; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_pages_id_put(_api, id; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_pages_post_PagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_pages_post(_api::PagesApi; pages_post_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_pages_post_PagesApi, "/pages", ["api-key", ], pages_post_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""pages

This endpoint allows the client to create a new page.

Params:
- pages_post_request::PagesPostRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function pages_post(_api::PagesApi; pages_post_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_pages_post(_api; pages_post_request=pages_post_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function pages_post(_api::PagesApi, response_stream::Channel; pages_post_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_pages_post(_api; pages_post_request=pages_post_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export pages_get
export pages_id_delete
export pages_id_get
export pages_id_put
export pages_post
