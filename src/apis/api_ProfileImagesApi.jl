# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ProfileImagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ProfileImagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ProfileImagesApi }) = "https://dev.to/api"

const _returntypes_get_profile_image_ProfileImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ProfileImage},
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_get_profile_image(_api::ProfileImagesApi, username::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_profile_image_ProfileImagesApi, "/profile_images/{username}", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""A Users or organizations profile image

This endpoint allows the client to retrieve a user or organization profile image information by its         corresponding username.

Params:
- username::String (required)

Return: Vector{ProfileImage}, OpenAPI.Clients.ApiResponse
"""
function get_profile_image(_api::ProfileImagesApi, username::String; _mediaType=nothing)
    _ctx = _oacinternal_get_profile_image(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_profile_image(_api::ProfileImagesApi, response_stream::Channel, username::String; _mediaType=nothing)
    _ctx = _oacinternal_get_profile_image(_api, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_profile_image
