# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DisplayAdsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DisplayAdsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DisplayAdsApi }) = "https://dev.to/api"

const _returntypes_display_ads_get_DisplayAdsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{DisplayAd},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_display_ads_get(_api::DisplayAdsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_display_ads_get_DisplayAdsApi, "/display_ads", ["api-key", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""display ads

This endpoint allows the client to retrieve a list of all display ads.

Params:

Return: Vector{DisplayAd}, OpenAPI.Clients.ApiResponse
"""
function display_ads_get(_api::DisplayAdsApi; _mediaType=nothing)
    _ctx = _oacinternal_display_ads_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function display_ads_get(_api::DisplayAdsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_display_ads_get(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_display_ads_id_get_DisplayAdsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_display_ads_id_get(_api::DisplayAdsApi, id::Int64; _mediaType=nothing)
    OpenAPI.validate_param("id", "display_ads_id_get", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_display_ads_id_get_DisplayAdsApi, "/display_ads/{id}", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""display ad

This endpoint allows the client to retrieve a single display ad, via its id.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function display_ads_id_get(_api::DisplayAdsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_display_ads_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function display_ads_id_get(_api::DisplayAdsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_display_ads_id_get(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_display_ads_id_put_DisplayAdsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{DisplayAd},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_display_ads_id_put(_api::DisplayAdsApi, id::Int64; display_ad=nothing, _mediaType=nothing)
    OpenAPI.validate_param("id", "display_ads_id_put", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_display_ads_id_put_DisplayAdsApi, "/display_ads/{id}", ["api-key", ], display_ad)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""display ads

This endpoint allows the client to update the attributes of a single display ad, via its id.

Params:
- id::Int64 (required)
- display_ad::Vector{DisplayAd}

Return: Vector{DisplayAd}, OpenAPI.Clients.ApiResponse
"""
function display_ads_id_put(_api::DisplayAdsApi, id::Int64; display_ad=nothing, _mediaType=nothing)
    _ctx = _oacinternal_display_ads_id_put(_api, id; display_ad=display_ad, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function display_ads_id_put(_api::DisplayAdsApi, response_stream::Channel, id::Int64; display_ad=nothing, _mediaType=nothing)
    _ctx = _oacinternal_display_ads_id_put(_api, id; display_ad=display_ad, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_display_ads_id_unpublish_put_DisplayAdsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_display_ads_id_unpublish_put(_api::DisplayAdsApi, id::Int64; _mediaType=nothing)
    OpenAPI.validate_param("id", "display_ads_id_unpublish_put", :minimum, id, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_display_ads_id_unpublish_put_DisplayAdsApi, "/display_ads/{id}/unpublish", ["api-key", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""unpublish

This endpoint allows the client to remove a display ad from rotation by un-publishing it.

Params:
- id::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function display_ads_id_unpublish_put(_api::DisplayAdsApi, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_display_ads_id_unpublish_put(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function display_ads_id_unpublish_put(_api::DisplayAdsApi, response_stream::Channel, id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_display_ads_id_unpublish_put(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_display_ads_post_DisplayAdsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{DisplayAd},
    Regex("^" * replace("401", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("422", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_display_ads_post(_api::DisplayAdsApi; display_ad=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_display_ads_post_DisplayAdsApi, "/display_ads", ["api-key", ], display_ad)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""display ads

This endpoint allows the client to create a new display ad.

Params:
- display_ad::Vector{DisplayAd}

Return: Vector{DisplayAd}, OpenAPI.Clients.ApiResponse
"""
function display_ads_post(_api::DisplayAdsApi; display_ad=nothing, _mediaType=nothing)
    _ctx = _oacinternal_display_ads_post(_api; display_ad=display_ad, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function display_ads_post(_api::DisplayAdsApi, response_stream::Channel; display_ad=nothing, _mediaType=nothing)
    _ctx = _oacinternal_display_ads_post(_api; display_ad=display_ad, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export display_ads_get
export display_ads_id_get
export display_ads_id_put
export display_ads_id_unpublish_put
export display_ads_post
